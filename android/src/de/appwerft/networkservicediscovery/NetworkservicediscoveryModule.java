/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package de.appwerft.networkservicediscovery;

import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollFunction;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.titanium.TiApplication;

import android.content.Context;
import android.net.nsd.NsdManager;
import android.net.nsd.NsdServiceInfo;

@Kroll.module(name = "Networkservicediscovery", id = "de.appwerft.networkservicediscovery")
public class NetworkservicediscoveryModule extends KrollModule {
	private static final String LCAT = "BONJOUR ðŸ˜ˆ";
	Context ctx;
	NsdManager nsdManager;
	private KrollFunction onFoundCallback = null;
	private KrollFunction onLostCallback = null;
	String dnsType;
	// You can define constants with @Kroll.constant, for example:
	@Kroll.constant
	public static final String TYPE_AIRLINO = "_dockset._tcp";
	@Kroll.constant
	public static final String TYPE_HTTP = "_http._tcp";
	@Kroll.constant
	public static final String TYPE_PRINTER = "_ipp._tcp";

	public NetworkservicediscoveryModule() {
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app) {
	}

	@Kroll.method
	public void start(KrollDict opt) {
		initDiscovery(opt);
	}

	@Kroll.method
	public void initDiscovery(KrollDict opt) {
		Object fcallback;
		Object lcallback;
		if (opt.containsKeyAndNotNull("dnsType")) {
			dnsType = opt.getString("dnsType");
		}
		if (opt.containsKeyAndNotNull("onFound")) {
			fcallback = opt.get("onFound");
			if (fcallback instanceof KrollFunction) {
				onFoundCallback = (KrollFunction) fcallback;
			}
		}
		if (opt.containsKeyAndNotNull("onLost")) {
			lcallback = opt.get("onFound");
			if (lcallback instanceof KrollFunction) {
				onLostCallback = (KrollFunction) lcallback;
			}
		}
		this.initializeDiscoveryListener();
	}

	public void initializeDiscoveryListener() {
		ctx = TiApplication.getInstance().getApplicationContext();
		nsdManager = (NsdManager) ctx.getSystemService(Context.NSD_SERVICE);
		Log.d(LCAT, "initializeDiscoveryListener = " + nsdManager.toString());
		NsdManager.DiscoveryListener discListener = new NsdManager.DiscoveryListener() {
			@Override
			public void onDiscoveryStarted(String regType) {
				Log.d(LCAT, "Service discovery started");
			}

			@Override
			public void onServiceFound(NsdServiceInfo service) {
				// A service was found! Do something with it.
				KrollDict dict = new KrollDict();
				Log.d(LCAT, "Service discovery success" + service);
				dict.put("ip", service.getHost().getHostAddress());
				dict.put("port", service.getPort());
				dict.put("name", service.getServiceName());
				Log.d(LCAT, dict.toString());
				if (onFoundCallback != null)
					onFoundCallback.call(getKrollObject(), dict);
			}

			@Override
			public void onServiceLost(NsdServiceInfo service) {
				KrollDict dict = new KrollDict();
				dict.put("ip", service.getHost().getHostAddress());
				dict.put("port", service.getPort());
				dict.put("name", service.getServiceName());
				Log.d(LCAT, dict.toString());
				if (onLostCallback != null)
					onLostCallback.call(getKrollObject(), dict);
			}

			@Override
			public void onDiscoveryStopped(String serviceType) {
				Log.i(LCAT, "Discovery stopped: " + serviceType);
			}

			@Override
			public void onStartDiscoveryFailed(String serviceType, int errorCode) {
				Log.e(LCAT, "Discovery failed: Error code:" + errorCode);
				nsdManager.stopServiceDiscovery(this);
			}

			@Override
			public void onStopDiscoveryFailed(String serviceType, int errorCode) {
				Log.e(LCAT, "Discovery failed: Error code:" + errorCode);
				nsdManager.stopServiceDiscovery(this);
			}
		};
	}
}
